package com.sbnz;

import com.sbnz.timemanagementadvisor.model.AdviceMessage;
import com.sbnz.timemanagementadvisor.model.ActivityInstance;
import com.sbnz.timemanagementadvisor.model.DayTemplate;
import com.sbnz.timemanagementadvisor.model.Routine;
import com.sbnz.timemanagementadvisor.model.Activity;
import com.sbnz.timemanagementadvisor.model.enums.ActivityContinuityType;

import com.sbnz.timemanagementadvisor.utils.DateTimeUtils;
import com.sbnz.timemanagementadvisor.utils.SetUtils;

import java.time.LocalTime;
import java.time.Duration;
import java.time.LocalDateTime;
import java.time.LocalDate;

// declare HPA
//   list: Activity[]
//   n:int
// end


// rule "Insert HighPriorityActivities"
//     salience 0.1
//     when
//         not(HPA())
//     then
//         System.out.println("Add hpa");
//         HPA hpa = new HPA();
//         hpa.setList(new Activity[3]);
//         hpa.setN(0);
//         insert(hpa);
// end

// rule "Find activities with highest priority a"
//     salience 10000 - ($left/$est)
//     when
//         $act: Activity(!start.toLocalDate().isAfter(LocalDate.now()),
//                        $left: Duration.between(LocalDateTime.now(), end).toMinutes(), $est: estimatedTimeMinutes)
//         $hpa: HPA($al: list, $n: n)
//     then
//         if ($n<3) {
//         System.out.println("find activities with highest priority "+$act.getTitle());
//         $al[$n] = $act;
//         $hpa.setN($n+1);
//         }
// end


rule "Check overlap (ONE_TIME - ONE_TIME)"
    when
        $new: Activity(id == null, continuityType == ActivityContinuityType.ONE_TIME, $start: start, $end: end)
        $act: Activity(id != null, continuityType == ActivityContinuityType.ONE_TIME, 
                      DateTimeUtils.isOverlapping($start, $end, start, end))
        $msg: AdviceMessage(text == null)
    then
        $msg.setText("Overlaps with activity '"+$act.getTitle()+"'");
end


rule "Check overlap (PERIODIC - PERIODIC)"
    when
        $new: Activity(id == null, continuityType == ActivityContinuityType.PERIODIC, $start: start, $end: end, $forDays: forDays)
        $act: Activity(id != null, continuityType == ActivityContinuityType.PERIODIC, 
                      DateTimeUtils.isOverlapping($start, $end, start, end),
                      SetUtils.haveCommon($forDays, forDays),
                      DateTimeUtils.isOverlapping($start.toLocalTime(), $end.toLocalTime(), start.toLocalTime(), end.toLocalTime()))
        $msg: AdviceMessage(text == null)
    then
        $msg.setText("Overlaps with activity '"+$act.getTitle()+"'");
end


rule "Check enough time"
    when
        $new: Activity(id == null, continuityType == ActivityContinuityType.CONTINUAL, $start: start, end!=null, $end: end)

    then
end


rule "Check contraints"
    when
    then
end