package com.sbnz;

import com.sbnz.timemanagementadvisor.model.AdviceMessage;
import com.sbnz.timemanagementadvisor.model.DayTemplate;
import com.sbnz.timemanagementadvisor.model.Activity;
import com.sbnz.timemanagementadvisor.model.enums.ActivityContinuityType;
import com.sbnz.timemanagementadvisor.model.enums.MessageLevel;

import com.sbnz.timemanagementadvisor.utils.DateTimeUtils;
import com.sbnz.timemanagementadvisor.utils.SetUtils;

import java.time.LocalTime;
import java.time.Duration;
import java.time.LocalDateTime;
import java.time.LocalDate;


rule "Check overlap (ONE_TIME - ONE_TIME)"
    agenda-group "conflict"
    when
        $new: Activity(id == null, continuityType == ActivityContinuityType.ONE_TIME, $start: start, $end: end)
        $act: Activity(id != null, continuityType == ActivityContinuityType.ONE_TIME, 
                      DateTimeUtils.isOverlapping($start, $end, start, end))
        $msg: AdviceMessage(text == null)
    then
        $msg.setText("Overlaps with activity '"+$act.getTitle()+"'");
        $msg.setLevel(MessageLevel.WARN);
end


rule "Check overlap (PERIODIC - PERIODIC)"
    agenda-group "conflict"
    when
        $new: Activity(id == null, continuityType == ActivityContinuityType.PERIODIC, $start: start, $end: end, $forDays: forDays)
        $act: Activity(id != null, continuityType == ActivityContinuityType.PERIODIC, 
                      DateTimeUtils.isOverlapping($start, $end, start, end),
                      SetUtils.haveCommon($forDays, forDays),
                      DateTimeUtils.isOverlapping($start.toLocalTime(), $end.toLocalTime(), start.toLocalTime(), end.toLocalTime()))
        $msg: AdviceMessage(text == null)
    then
        $msg.setText("Overlaps with activity '"+$act.getTitle()+"'");
        $msg.setLevel(MessageLevel.WARN);
end


rule "Check enough time"
    agenda-group "conflict"
    when
        $new: Activity(id == null, continuityType == ActivityContinuityType.CONTINUAL, $start: start, end!=null, $end: end)
        $msg: AdviceMessage(text == null)

    then


        //$msg.setLevel(MessageLevel.WARN);
end


rule "Check contraints - duration"
    agenda-group "constraints"
    when
        Activity(end != null, Duration.between(start, end).toMinutes() < 10)
        $msg: AdviceMessage(text == null)
    then
        $msg.setText("Activity should be at least 10 min long.");
        $msg.setLevel(MessageLevel.ERROR);
end


rule "Check contraints - end in past"
    agenda-group "constraints"
    when
        Activity(end != null, end.isBefore(LocalDateTime.now()))
        $msg: AdviceMessage(text == null)
    then
        $msg.setText("Activity cannot end in past.");
        $msg.setLevel(MessageLevel.ERROR);
end


rule "Check contraints - one-time end or est"
    agenda-group "constraints"
    when
        Activity(continuityType == ActivityContinuityType.ONE_TIME, end == null, estimatedTimeMinutes == null)
        $msg: AdviceMessage(text == null)
    then
        $msg.setText("For one-time activity either end or estimated time should be given.");
        $msg.setLevel(MessageLevel.ERROR);
end


rule "Check contraints - periodic end or est"
    agenda-group "constraints"
    when
        Activity(continuityType == ActivityContinuityType.PERIODIC, end == null, estimatedTimeMinutes == null)
        $msg: AdviceMessage(text == null)
    then
        $msg.setText("For periodic activity either end or estimated time should be given.");
        $msg.setLevel(MessageLevel.ERROR);
end


rule "Set end instead of estimated time"
    agenda-group "constraints"
    when
        $act: Activity(continuityType != ActivityContinuityType.CONTINUAL, end == null, $est: estimatedTimeMinutes, $est != null, $start:start)
    then
        modify($act) { setEnd($start.plusMinutes($est)) }
end


rule "Check contraints - periodic forDays"
    agenda-group "constraints"
    when
        Activity(continuityType == ActivityContinuityType.PERIODIC, (forDays == null || forDays.size() == 0))
        $msg: AdviceMessage(text == null)
    then
        $msg.setText("For periodic activity days should be given.");
        $msg.setLevel(MessageLevel.ERROR);
end
