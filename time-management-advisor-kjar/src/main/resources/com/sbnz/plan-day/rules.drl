package com.sbnz;

import com.sbnz.timemanagementadvisor.model.DailyTimeSheet;
import com.sbnz.timemanagementadvisor.model.ActivityInstance;
import com.sbnz.timemanagementadvisor.model.DayTemplate;
import com.sbnz.timemanagementadvisor.model.Routine;
import com.sbnz.timemanagementadvisor.model.Activity;
import com.sbnz.timemanagementadvisor.model.enums.ActivityContinuityType;

import com.sbnz.timemanagementadvisor.utils.DateTimeUtils;

import java.time.LocalTime;
import java.time.Duration;
import java.time.LocalDateTime;
import java.time.LocalDate;
import org.bson.types.ObjectId;

declare LastActivityEnd
  time: LocalTime
  note: java.lang.String
end

declare NextActivityInfo
  activity: Activity
  note: java.lang.String
end

declare NextRoutineInfo
  routine: Routine
  added: boolean
  note: java.lang.String
end

declare HighPriorityActivities
  list: Activity[]
  durations: int[]
  n: int
  find: boolean
  note: java.lang.String
end


rule "Find template"
    when
        $day: DailyTimeSheet(templateId == null, $date: day)
        $dt: DayTemplate(forDays contains $date.getDayOfWeek())
    then
        System.out.println("find template");
        modify($day) { setTemplateId($dt.getId()) }
end


rule "Insert LastActivityEnd and HighPriorityActivities"
    when
        not(LastActivityEnd())
        not(HighPriorityActivities())
        not(NextRoutineInfo())
    then
        System.out.println("Add LastActivityEnd and HighPriorityActivities");
        LastActivityEnd l = new LastActivityEnd();
        l.setTime(LocalTime.MIDNIGHT);
        insert(l);
        HighPriorityActivities hpa = new HighPriorityActivities();
        hpa.setList(new Activity[5]);
        hpa.setDurations(new int[5]);
        hpa.setN(0);
        hpa.setFind(true);
        insert(hpa);
        NextRoutineInfo nri = new NextRoutineInfo();
        nri.setAdded(true);
        insert(nri);
end


rule "Find next one time activity"
    salience 10002
    when
        $day: DailyTimeSheet($date: day)
        $lae: LastActivityEnd($time: time)
        not(NextActivityInfo())
        accumulate(
            Activity(continuityType == ActivityContinuityType.ONE_TIME, $start: start, $start.toLocalDate().equals($date),
                    !$start.isBefore(LocalDateTime.of($date, $time))),
            $nearestTime: min($start)
        )
        $act: Activity(start.equals($nearestTime), continuityType == ActivityContinuityType.ONE_TIME)
    then
        System.out.println("find next one time activity");
        NextActivityInfo info = new NextActivityInfo();
        info.setActivity($act);
        insert(info);
end


rule "Find next periodic activity"
    salience 10001
    when
        $day: DailyTimeSheet($date: day)
        $lae: LastActivityEnd($time: time)
        not(NextActivityInfo())
        $act: Activity(this != null) from accumulate(
            Activity($this: this, continuityType == ActivityContinuityType.PERIODIC,
                    $startTime: start.toLocalTime(), $startDate: start.toLocalDate(),
                    !$startTime.isBefore($time), !$startDate.isAfter($date),
                    forDays contains $date.getDayOfWeek()
            ),
            init(Activity a = null;)
            action(if (a == null || $startTime.isBefore(a.getStart().toLocalTime())) a = $this;)
            result(a)
        )
    then
        System.out.println("find next periodic activity");
        NextActivityInfo info = new NextActivityInfo();
        info.setActivity($act);
        insert(info);
end


rule "Find next routine"
    salience 10000
    when
        $day: DailyTimeSheet($tid: templateId)
        $lae: LastActivityEnd($time: time)
        $dt: DayTemplate(id == $tid, $routines: routines)
        $info: NextRoutineInfo(added, $r: routine)
        accumulate(
            Routine(this != $r, $start: earliestStart, !latestStart.isBefore($time)) from $routines,
            $nearestTime: min($start)
        )
        $routine: Routine(earliestStart.equals($nearestTime)) from $routines
    then
        System.out.println("find next routine");
        modify($info) { setRoutine($routine), setAdded(false) }
end


rule "Find activities with highest priority"
    salience 10000 - (Duration.between(LocalDateTime.of($date, $time), $end).toMinutes() / $est)
    when
        $day: DailyTimeSheet($date: day)
        $lae: LastActivityEnd($time: time)
        $act: Activity(continuityType == ActivityContinuityType.CONTINUAL, !start.toLocalDate().isAfter($date),
                       $est: estimatedTimeMinutes, $end: end)
        $hpa: HighPriorityActivities($al: list, $n: n, $dl: durations, find)
        eval($n < 5)
    then
        $al[$n] = $act;
        long daysLeft = Duration.between(LocalDateTime.of($date,$time), $end).toDays();
        $dl[$n] = (daysLeft < 1) ? $est : (int)($est / daysLeft);
        System.out.println("find activities with highest priority: "+$act.getTitle()+"; d:"+ $dl[$n]);
        $hpa.setN($n+1);
end


rule "Add routine"
    salience 1000
    when
        $day: DailyTimeSheet($date: day)
        $lae: LastActivityEnd($time: time)
        $next: NextRoutineInfo($routine: routine, $es: routine.earliestStart, $ls: routine.latestStart, 
                                DateTimeUtils.isBetween($time, $es, $ls), !added)
        $hpa: HighPriorityActivities()
    then
        System.out.println("add routine");
        ActivityInstance ai = new ActivityInstance();
        ai.setTitle($routine.getName());
        ai.setStart($time);
        ai.setEnd($time.plusMinutes($routine.getDurationMinutes()));
        modify($day) { getActivities().add(ai) }
        modify($lae) { setTime(ai.getEnd()) }
        modify($next) { setAdded(true) }
        modify($hpa) { setFind(false) }
end


rule "Add routine - overlaps with fix activity"
    salience 1001
    when
        $day: DailyTimeSheet($date: day)
        $lae: LastActivityEnd($time: time)
        $nextr: NextRoutineInfo($routine: routine, $es: routine.earliestStart, $ls: routine.latestStart,
                                DateTimeUtils.isBetween($time, $es, $ls), $d: routine.durationMinutes, !added)
        $nexta: NextActivityInfo($as: activity.start.toLocalTime(), DateTimeUtils.isBetween($as, $time, $time.plusMinutes($d)), $t: activity.title)
        $hpa: HighPriorityActivities()
    then
        System.out.println("add routine - overlaps with fix activity");
        ActivityInstance ai = new ActivityInstance();
        ai.setTitle($routine.getName());
        ai.setDescription("WARNING: shorter because of: "+$t);
        ai.setStart($time);
        ai.setEnd($as.minusMinutes(15));
        modify($day) { getActivities().add(ai) }
        modify($lae) { setTime(ai.getEnd()) }
        modify($nextr) { setAdded(true) }
        modify($hpa) { setFind(false) }
end


rule "Add fix activity"
    salience 1500
    when
        $day: DailyTimeSheet($date: day)
        $lae: LastActivityEnd($time: time)
        $next: NextActivityInfo($act: activity, $start: activity.start.toLocalTime(), DateTimeUtils.isInNMinutes($time, $start, 20))
        $hpa: HighPriorityActivities()
    then
        System.out.println("add fix activity");
        ActivityInstance ai = new ActivityInstance();
        ai.setActivityId($act.getId());
        ai.setTitle($act.getTitle());
        ai.setDescription($act.getDescription());
        ai.setStart($start);
        ai.setEnd($act.getEnd().toLocalTime());
        modify($day) { getActivities().add(ai) }
        modify($lae) { setTime(ai.getEnd()) }
        delete($next);
        modify($hpa) { setFind(false) }
end


rule "Add continual activity"
    when
        $day: DailyTimeSheet()
        $lae: LastActivityEnd($time: time, $time.isBefore(LocalTime.MAX.minusMinutes(1)))
        NextActivityInfo($act: activity, $astart: activity.start.toLocalTime())
        NextRoutineInfo($rou: routine, $rstart: routine.earliestStart, !added)
        $hpa: HighPriorityActivities($al: list, $n:n, $dl: durations)
        eval($n > 0)
    then
        System.out.println("add continual activity");
        LocalTime end = $astart.isAfter($rstart) ? $rstart : $astart;
        ActivityInstance ai = new ActivityInstance();
        Activity a = $al[0];
        ai.setActivityId(a.getId());
        ai.setTitle(a.getTitle());
        ai.setDescription(a.getDescription());
        ai.setStart($time);
        // TODO checklist?
        if (Duration.between($time, end).toMinutes() > $dl[0]) end = $time.plusMinutes($dl[0]);
        ai.setEnd(end);
        $dl[0] -= Duration.between($time, end).toMinutes();
        if ($dl[0]<=0) {
            for (int i = 1; i < $al.length; i++) {
                $al[i-1] = $al[i];
                $dl[i-1] = $dl[i];
            }
            $hpa.setN($hpa.getN()-1);
        }
        modify($day) { getActivities().add(ai) }
        modify($lae) { setTime(ai.getEnd()) }
        modify($hpa) { setFind(false) }
end


rule "Add continual activity - no fix"
    when
        $day: DailyTimeSheet()
        $lae: LastActivityEnd($time: time, $time.isBefore(LocalTime.MAX.minusMinutes(1)))
        not(NextActivityInfo())
        NextRoutineInfo($rou: routine, $rstart: routine.earliestStart, !added)
        $hpa: HighPriorityActivities($al: list, $n:n, $dl: durations)
        eval($n > 0)
    then
        System.out.println("add continual activity");
        LocalTime end = $rstart;
        ActivityInstance ai = new ActivityInstance();
        Activity a = $al[0];
        ai.setActivityId(a.getId());
        ai.setTitle(a.getTitle());
        ai.setDescription(a.getDescription());
        ai.setStart($time);
        // TODO checklist?
        if (Duration.between($time, end).toMinutes() > $dl[0]) end = $time.plusMinutes($dl[0]);
        ai.setEnd(end);
        $dl[0] -= Duration.between($time, end).toMinutes();
        if ($dl[0]<=0) {
            for (int i = 1; i < $al.length; i++) {
                $al[i-1] = $al[i];
                $dl[i-1] = $dl[i];
            }
            $hpa.setN($hpa.getN()-1);
        }
        modify($day) { getActivities().add(ai) }
        modify($lae) { setTime(ai.getEnd()) }
        modify($hpa) { setFind(false) }
end


rule "Add dummy activity"
    when
        $day: DailyTimeSheet()
        $lae: LastActivityEnd($time: time, $time.isBefore(LocalTime.MAX.minusMinutes(1)))
        NextRoutineInfo($rou: routine, $rstart: routine.earliestStart, !added)
        not(NextActivityInfo())
        $hpa: HighPriorityActivities($n:n)
        eval($n == 0)
    then
        System.out.println("add dummy activity");
        LocalTime end = $rstart;
        ActivityInstance ai = new ActivityInstance();
        ai.setTitle("SOME ACTIVITY");
        ai.setDescription("AAAAAAAAAAAAAAAAA");
        ai.setStart($time);
        ai.setEnd(end);
        modify($day) { getActivities().add(ai) }
        modify($lae) { setTime(ai.getEnd()) }
        modify($hpa) { setFind(false) }
end