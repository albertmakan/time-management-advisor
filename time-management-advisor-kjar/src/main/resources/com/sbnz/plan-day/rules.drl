package com.sbnz;

import com.sbnz.timemanagementadvisor.model.DailyTimeSheet;
import com.sbnz.timemanagementadvisor.model.ActivityInstance;
import com.sbnz.timemanagementadvisor.model.DayTemplate;
import com.sbnz.timemanagementadvisor.model.Routine;
import com.sbnz.timemanagementadvisor.model.Activity;
import com.sbnz.timemanagementadvisor.model.enums.ActivityContinuityType;

import com.sbnz.timemanagementadvisor.utils.DateTimeUtils;

import java.time.LocalTime;
import java.time.Duration;
import java.time.LocalDateTime;
import java.time.LocalDate;
import org.bson.types.ObjectId;

declare LastActivityEnd
  time: LocalTime
  note: java.lang.String
end

declare NextActivityInfo
  activity: Activity
  isFound: boolean
  note: java.lang.String
end


rule "Find template"
    when
        $day: DailyTimeSheet(templateId == null, $date: day)
        $dt: DayTemplate(forDays contains $date.getDayOfWeek())
    then
        System.out.println("find template");
        modify($day) { setTemplateId($dt.getId()) }
end


rule "Find next one time activity"
    salience 10
    when
        $day: DailyTimeSheet($date: day)
        $lae: LastActivityEnd($time: time)
        not(NextActivityInfo())
        accumulate(
            Activity(continuityType == ActivityContinuityType.ONE_TIME, $start: start,
                    !$start.isBefore(LocalDateTime.of($date, $time))),
            $nearestTime: min($start)
        )
        $act: Activity(start.equals($nearestTime), continuityType == ActivityContinuityType.ONE_TIME)
    then
        NextActivityInfo info = new NextActivityInfo();
        info.setActivity($act);
        insert(info);
end


rule "Find next periodic activity"
    salience 9
    when
        $day: DailyTimeSheet($date: day)
        $lae: LastActivityEnd($time: time)
        not(NextActivityInfo())
        $act: Activity(this != null) from accumulate(
            Activity($this: this, continuityType == ActivityContinuityType.PERIODIC,
                    $startTime: start.toLocalTime(), $startDate: start.toLocalDate(),
                    !$startTime.isBefore($time), !$startDate.isBefore($date),
                    (periodicInfo.forDays contains $date.getDayOfWeek() || 
                    (Duration.between($startDate, $date).toDays() % periodicInfo.nDays) == 0)
            ),
            init(Activity a = null;)
            action(if (a == null || $startTime.isBefore(a.getStart().toLocalTime())) a = $this;)
            result(a)
        )
    then
        NextActivityInfo info = new NextActivityInfo();
        info.setActivity($act);
        insert(info);
end


rule "add routine"
    salience 1000
    when
        $day: DailyTimeSheet($tid: templateId)
        $lae: LastActivityEnd($time: time)
        $dt: DayTemplate(id == $tid, $routines:routines)
        $routine: Routine($start: start, DateTimeUtils.isInNMinutes($time, $start, 16)) from $routines
    then
        System.out.println("add routine");
        ActivityInstance ai = new ActivityInstance();
        ai.setTitle($routine.getName());
        ai.setStart($start);
        ai.setEnd($routine.getEnd());
        modify($day) { getActivities().add(ai) }
        modify($lae) { setTime($routine.getEnd()) }
end


rule "Add fix activity"
    salience 1500
    when
        $day: DailyTimeSheet($date: day)
        $lae: LastActivityEnd($time: time)
        $next: NextActivityInfo($act: activity, $start: activity.start.toLocalTime(), DateTimeUtils.isInNMinutes($time, $start, 20))
    then
        System.out.println("add fix activity");
        ActivityInstance ai = new ActivityInstance();
        ai.setTitle($act.getTitle());
        ai.setDescription($act.getDescription());
        ai.setStart($start);
        ai.setEnd($act.getEnd().toLocalTime());
        modify($day) { getActivities().add(ai) }
        modify($lae) { setTime(ai.getEnd()) }
        delete($next);
end


rule "add continual activity"
    salience 500
    when
        $day: DailyTimeSheet()
        $lae: LastActivityEnd($time: time, $time.isBefore(LocalTime.MAX.minusMinutes(15)))
    then
    // TODO refactor!
        System.out.println("add continual activity");
        ActivityInstance ai = new ActivityInstance();
        ai.setActivityId(new ObjectId("6295083c44853355ba2a64ce"));
        ai.setTitle("SOME ACTIVITY");
        ai.setStart($time);
        ai.setEnd($time.plusMinutes(15));
        int len = $day.getActivities().size();
        if (len==0 || !ai.getActivityId().equals($day.getActivities().get(len-1).getActivityId()))
            modify($day) { getActivities().add(ai) }
        else
            modify($day) { getActivities().get(len-1).setEnd(ai.getEnd()) }
        modify($lae) { setTime(ai.getEnd()) }
end


rule "Add LastActivityEnd"
    when
        not(LastActivityEnd())
    then
        System.out.println("Add LastActivityEnd");
        LastActivityEnd l = new LastActivityEnd();
        l.setTime(LocalTime.MIDNIGHT);
        insert(l);
end
